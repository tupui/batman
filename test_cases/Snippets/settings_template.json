{
    #
    # PARAMETERS FOR SPACE
    #
    "space": {
        # Lower and upper end points (corners) that define a portion of space.
        # format: list(2-lists) of [min] an [max] coordinates.
        "corners": [[1.0, 1.0], [3.1415, 3.1415]],
        "sampling": {
            # Maximum number of point used: initial sampling + resampling
            # format: integer
            "init_size": 10,
            # Method used to generate the points
            # format: one of 'uniform', 'halton', 'sobol', 'lhsc', 'lhsr',
            # "sobolscramble", "faure"
            "method": "halton",
        },
        # Points provider
        # Could be a list of points or a dictionary with sampling parameters
        "resampling": {
            # Innerspace defined by corners for resampling
            # format: float
            "delta_space": 0.08,
            # Number of points for initial sampling
            # format: integer
            "resamp_size": 6,
            # Resampling strategy: None, 'sigma', 'loo_sigma', 'loo_sobol",
            # "extrema", "hybrid"
            "method": "sigma",
            # Optional, only for combining methods
            "hybrid": [["sigma", 4], ["loo_sobol", 2]],
            # Stopping criterion for automatic resampling
            # format: float
            "q2_criteria": 0.8
        }
    },
    #
    # PARAMETERS FOR POD
    #
    "pod": {
        # Maximum number of modes to be kept
        # format: integer
        "dim_max": 100,
        # Tolerance of the modes to be kept.
        # A percentage of the sum of the singular values, values that account for less than of this tolerance are ignored.
        # format: float
        "tolerance": 0.99,
        # Type of pod to perform.
        # format: one of 'static', 'dynamic'
        "type": "static"
    },
    #
    # PARAMETERS FOR SNAPSHOTS
    #
    "snapshot": {
        # Maximum number of simultaneous running snapshot provider
        # format: integer > 0
        "max_workers": 10,
        # Input output settings
        "io": {
            # Names of the parameters
            # format: list of strings
            "parameter_names": ["x1", "x2"]
            # Shapes of one variable for each file and each mpi cpu
            # When ran on only 1 cpu, all shapes are gathered
            "shapes": {"0": [[1]]},
            # File format
            # format: "npz", "fmt_tp_fortran" (JPOD) or all Antares formats if
            # installed
            "format": "fmt_tp_fortran",
            # Names of the variables contained in a snapshot
            # format: list of strings
            "variables": ["F"],
            # Name of the file that contains the coordinates of a point in the space of parameters
            # format: string
            "point_filename": "header.py",
            # File names for each mpi cpu
            # When ran on only 1 cpu, all filenames are gathered
            # format: list of strings
            "filenames": {"0": ["function.dat"]},
            # Depreciated option
            "template_directory": null,
        },
        # Snapshot provider
        # Could be a python function, a python list of directories or a python
        # dictionary with settings for using an external program like
        # submitting elsA jobs
        "provider": {
            # JPOD can run scripts or submit jobs
            # format: string
            "command": "bash",
            # Estimated duration of each jobs (or scripts) in seconds to test the completion
            # format: integer
            "timeout": 50,
            # Driectiory where the data for the JPOD computations are stored
            # format: string
            "context": "data",
            # Patch of the script or batch to run
            # format: string
            "script": "data/script.sh",
            # Delete after run all except what is inside private-directory
            # format: boolean
            "clean": false,
            # Directory where the JPOD files are stored
            # format: string
            "private-directory": "batman-data",
            # Directory where CFD ouput dat are stored
            # format string
            "data-directory": "cfd-output-data",
            # Depreciated option
            "restart": "False"
        }
    },
    #
    # PARAMETERS FOR SURROGATE
    #
    "surrogate": {
        # Set of points at which the predictions are made
        # format: list of tuples of floats
        "predictions": [],
        # Method used to generate a snapshot
        # format: one of 'rbf' or 'kriging'
        "method": "kriging"
    },
    #
    # PARAMETERS FOR UNCERTAINTY QUANTIFICATION
    #
    "uq": {
        # Number of samples for the UQ analysis
        # format: integer > 0
        "sample": 1000,
        # Enter the PDF of the inputs: x1: Normal(mu, sigma), x2: Uniform(inf,
        # sup)
        "pdf": ["Uniform(1., 3.1415)", "Uniform(1., 3.1415)"],
        # Typy of indices we are interested in
        # format: one of 'aggregated' or 'block'
        "type": "aggregated",
        # Method used for Sobol analysis
        # format: one of 'sobol' or 'FAST'
        "method": "sobol"
    }
}
