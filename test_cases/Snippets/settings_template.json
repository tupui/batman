{
#
# PARAMETERS FOR SPACE 
#
    "space": {
# Lower and upper end points (corners) that define a portion of space.
# format : 2-tuple of tuples with end points coordinates.
        "corners": [[1.0, 1.0],[3.1415, 3.1415]],
# Maximum number of point, used for pod automatic resampling
# format : integer
        "size_max": 15,
# Inners space 
        "delta_space": 0.01,
# Points provider
# Could be a list of points or a dictionary with sampling parameters
        "provider": {
# Method used to generate the points
# format : one of 'uniform', 'halton', 'sobol', 'lhsc', 'lhsr'
        "method": "halton",
# Number of samples to be generated
# format : integer
        "size": 15
        }
    },
#
# PARAMETERS FOR POD   
#
    "pod": {
# Maximum number of modes to be kept
# format : integer
        "dim_max": 100,
# Tolerance of the modes to be kept.
# A percentage of the sum of the singular values, values that account for less than of this tolerance are ignored.
# format : float
        "tolerance": 0.99,
# Resampling strategy: None, 'MSE', 'loo_mse', 'loo_sobol"
        "resample": "MSE",
        "strategy": [["MSE", 4]],
# Stopping criterion for automatic resampling
# format : float
        "quality": 0.8,
# Otherwise the pod processing is run in another process or on another computer.
        "server": null,
# Type of pod to perform.
# format : one of 'static', 'dynamic'
        "type": "static"
    },
#
# PARAMETERS FOR SNAPSHOTS
#
    "snapshot": {
# Maximum number of simultaneous running snapshot provider
# format : integer > 0
        "max_workers": 10,
# Input output settings
        "io": {
# Shapes of one variable for each file and each mpi cpu
# When ran on only 1 cpu, all shapes are gathered
        "shapes": {"0": [[1]]},# mklj mlkj mlkj
# File format
# format : "fmt_tp_fortran" (JPOD) 
        "format": "fmt_tp_fortran",
# Names of the variables contained in a snapshot
# format : list of strings
        "variables": ["F"],
# Name of the file that contains the coordinates of a point in the space of parameters
# format : string 
        "point_filename": "header.py",
# File names for each mpi cpu
# When ran on only 1 cpu, all filenames are gathered
# format : list of strings
        "filenames": {
                "0": ["function.dat"]
        },
# Depreciated option
        "template_directory": null,
# Names of the parameters
# format : list of strings
        "parameter_names": ["x1", "x2"]
    },
# Snapshot provider
# Could be a python function, a python list of directories or a python dictionary with settings for using an external program like submitting elsA jobs (see snapshot_provider for examples).
        "provider": {
# JPOD can run scripts or submit jobs
            "command": "bash",
# Estimated duration of each jobs (or scripts) in seconds to test the completion
            "timeout": 50,
# Driectiory where the data for the JPOD computations are stored
            "context": "data",
# Patch of the script or batch to run
            "script": "data/script.sh",
# Delete or not all except what is inside private-directory 
            "clean": false,
# Directory where the JPOD files are stored 
            "private-directory": "jpod-data",
# Directory where CFD ouput dat are stored
            "data-directory": "cfd-output-data",
# Depreciated option 
            "restart": "False"
        }
    },
#
# PARAMETERS FOR PREDICTIONS
#
    "prediction": {
# Set of points at which the predictions are made
# format : list of tuples of floats
        "points": [],
# Method used to generate a snapshot
# format : one of 'rbf' or 'kriging'
        "method": "kriging"
    },
#
# PARAMETERS FOR UQ            
#
    "uq": {
# Number of samples for the UQ analysis
# format : integer > 0 
        "sample": 1000,
# Enter the PDF of the inputs: x1: Normal(mu, sigma), x2: Uniform(inf, sup)
        "pdf": ["Uniform(1., 3.1415)", "Uniform(1., 3.1415)"],
# Typy of indices we are interested in   
# foramt : one of *aggregated* or *block*
        "type": "aggregated",
# Method used for Sobol analysis
# # foramt : one of Sobol* or *FAST*
        "method": "sobol"
    }
}
